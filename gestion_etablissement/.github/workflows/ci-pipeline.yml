name: CI - Authentification Service

on:
  push:
    branches:
      - main
      - develop
      - preprod
      - prod
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: elhadji01/teranga-auth-service
      REGISTRY_DEV: elhadji01/dev-registry
      REGISTRY_PROD: elhadji01/prod-registry
      SONAR_PROJECT_KEY: teranga-clean_auth-service
      SONAR_ORG: teranga-clean
      SONAR_HOST: https://sonarcloud.io

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: Configurer JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build du projet
        run: mvn clean install -DskipTests

      - name: Copier les fichiers de config Spring pour les tests
        run: |
          mkdir -p src/test/resources
          cp src/main/resources/application.yml src/test/resources/

      - name: Vérification SonarQube
        run: mvn sonar:sonar -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG -Dsonar.host.url=$SONAR_HOST
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#      - name: Stocker les artefacts de build
#        uses: actions/upload-artifact@v4
#        with:
#          name: auth-service-artifact
#          path: target/*.jar

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

#      - name: Télécharger les artefacts de build
#        uses: actions/download-artifact@v4
#        with:
#          name: auth-service-artifact
#          path: target

      - name: Configurer JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Exécuter les tests
        run: mvn test

  docker:
    needs: test
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: elhadji01/teranga-auth-service

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

#      - name: Télécharger les artefacts de build
#        uses: actions/download-artifact@v4
#        with:
#          name: auth-service-artifact
#          path: target

      - name: Login à Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Création et Push de l'image Docker
        run: |
          # Pour les push normaux
          if [[ "$GITHUB_REF" == refs/heads/* ]]; then
            TAG=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          # Pour les pull requests
          elif [[ "$GITHUB_REF" == refs/pull/* ]]; then
            TAG="pr-$(echo $GITHUB_REF | awk -F '/' '{print $3}')"
          else
            TAG=$GITHUB_SHA
          fi
          IMAGE_TAG=${{ env.IMAGE_NAME }}:$TAG
          echo "Création de l'image Docker avec le tag : $IMAGE_TAG"

          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

          if [ "$TAG" == "master" ] || [ "$TAG" == "main" ]; then
            docker tag $IMAGE_TAG ${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.IMAGE_NAME }}:latest
          fi

  deploy-k8s:
    needs: docker
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: elhadji01/teranga-auth-service

    steps:
      - name: Cloner le repo
        uses: actions/checkout@v3

      - name: Installer `kubectl`
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl